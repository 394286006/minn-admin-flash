<?xml version="1.0" encoding="utf-8"?>
<mx:Module xmlns:fx="http://ns.adobe.com/mxml/2009"
		   xmlns:s="library://ns.adobe.com/flex/spark"
		   xmlns:mx="library://ns.adobe.com/flex/mx"
		   xmlns:common="p.minn.common.*"
		   xmlns:picture="p.minn.demo.picture.*"
		   width="100%" height="100%" layout="absolute" name="HadoopSparkDemo" creationComplete="creationCompleteHandler(event)">
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.Tree;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.events.MenuEvent;
			import mx.rpc.http.HTTPService;
			
			import p.minn.message.Message;
			import p.minn.util.MinnUtil;
			
			
			[Bindable]
			private var results:ArrayCollection=new ArrayCollection();
			
			private var upfile:FileReference;
			private var fileTypes:FileFilter;
			[Bindable]
			private var filearr:ArrayCollection=new ArrayCollection();
			
			protected function creationCompleteHandler(event:Event):void
			{
				upfile=new FileReference();
				upfile.addEventListener(Event.SELECT, selectHandler);
				upfile.addEventListener(Event.OPEN, openHandler);
				upfile.addEventListener(ProgressEvent.PROGRESS, progressHandler);
				upfile.addEventListener(IOErrorEvent.IO_ERROR, uploadIoErrorHandler);
				upfile.addEventListener(DataEvent.UPLOAD_COMPLETE_DATA, uploadCompleteHandler);
				upfile.addEventListener(Event.CANCEL,cancelHandler);
				
				fileTypes = new FileFilter("文件(.txt.json)", ".txt;*.json");
				refreshFiles();
			}
			public function refresh(e:Event=null):void{
				
				var messageBody:Object=new Object();
				messageBody.page=pageBar.pageIndex
				messageBody.rp=pageBar.pageSize;
				var query:String="";
				if(name_id.text==''){
					query+=Config.UNKNOWN;
				}else{
					query+=name_id.text;
				}
				
				messageBody.qtype="name";
				messageBody.query=query;
				var param:Message=new Message(MinnUtil.getEncodeMessage(messageBody));
				param.setSecurityInfo(this.parentApplication.PRIVATEKEY,Math.random(),MinnUtil.getTimeStamp());
				var dictypeService:HTTPService=new HTTPService();
				MinnUtil.send(dictypeService,"/hdfs?method=query",invokeQuery,param);
			}
			
			
			/**
			 * 查询结果回调函数
			 **/ 
			public function invokeQuery(rs:Message):void{
				if(rs.sucess){
					pageBar.recordCount=rs.messageBody.total;
					results.source=rs.messageBody.result;
				}else{
					this.parentApplication.msgAlert(rs.messageBody);
				}
			}

			
			private function browseHandler(event:Event):void {
				btnUpload.enabled = false;
				upfile.browse([fileTypes]);
			}
			private function cancelHandler(e:Event):void
			{
			}
			private function selectHandler(event:Event):void {
				txtFilename.text =upfile.name;
				btnUpload.enabled = true;
				txt_id.text=upfile.data.toString();
			}
			
			private function openHandler(event:Event):void {
			}
			
			private function progressHandler(event:ProgressEvent):void {
				
			}
			
			private function uploadCompleteHandler(event:DataEvent):void {
				try {
					var message:Message=MinnUtil.getMessage(decodeURIComponent(event.data));
					if(message.sucess){
						refreshFiles();
						btnUpload.enabled=false;
						txtFilename.text="";
						Alert.show("上传成功！","提示");
						refreshFiles();
					}else{
						Alert.show(message.messageBody,"提示")
					}
				}
				catch (error:Error) {
					Alert.show("返回元素处理失败: " + error.message,"提示");
				}
			}
			
			private function uploadIoErrorHandler(event:IOErrorEvent):void {
				Alert.show("IO Error: " + event.toString());
			}

			protected function up_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				var url:String=null;
				var messageBody:Object=new Object();
					url=Config.UPLOAD_HDFS_URL+"?method=upload";
					
				messageBody.sourcename=upfile.name;
				var request:URLRequest = new URLRequest(url);
				request.method = "post";
				
				var variables:URLVariables = new URLVariables();
				variables.upfilename=messageBody.sourcename; 
				variables.messageBody=encodeURIComponent(MinnUtil.getEncodeMessage(messageBody));
				request.data =variables;
				upfile.upload(request);
			}
			
			public function import2DB(event:MouseEvent,messageBody:Object):void
			{
				// TODO Auto-generated method stub
				var param:Message=new Message(MinnUtil.getEncodeMessage(messageBody));
				param.setSecurityInfo(this.parentApplication.PRIVATEKEY,Math.random(),MinnUtil.getTimeStamp());
				var fileService:HTTPService=new HTTPService();
				MinnUtil.send(fileService,"/hdfs?method=import2db",invoke2db,param);
			}
			private function invoke2db(rs:Message):void{
				if(rs.sucess){
					refresh();
					this.parentApplication.msgAlert("入库成功！");
				}else{
					this.parentApplication.msgAlert(rs.messageBody);
				}
			}
			
			public function refreshFiles(evt:Event=null):void{
				var messageBody:Object=new Object();
				var param:Message=new Message(MinnUtil.getEncodeMessage(messageBody));
				param.setSecurityInfo(this.parentApplication.PRIVATEKEY,Math.random(),MinnUtil.getTimeStamp());
				var fileService:HTTPService=new HTTPService();
				MinnUtil.send(fileService,"/hdfs?method=readFiles",invokeFiles,param);
			}
			
			private function invokeFiles(rs:Message):void{
				if(rs.sucess){
					filearr.removeAll();
					filearr.addAll(new ArrayCollection(rs.messageBody));
				}else{
					this.parentApplication.msgAlert(rs.messageBody);
				}
				
			}
			
			protected function hdfsfile_id_itemDoubleClickHandler(event:ListEvent):void
			{
				// TODO Auto-generated method stub
				var messageBody:Object=hdfsfile_id.selectedItem;
				var param:Message=new Message(MinnUtil.getEncodeMessage(messageBody));
				param.setSecurityInfo(this.parentApplication.PRIVATEKEY,Math.random(),MinnUtil.getTimeStamp());
				var fileService:HTTPService=new HTTPService();
				MinnUtil.send(fileService,"/hdfs?method=readContent",invokeContent,param);
			}
			private function invokeContent(rs:Message):void{
				if(rs.sucess){
					txt_id.text=rs.messageBody.content;
				}else{
					this.parentApplication.msgAlert(rs.messageBody);
				}
				
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		
	</fx:Declarations>
	
	<mx:states>
		<s:State name="default"/>    
		<s:State name="qry"/>
	</mx:states>
	<mx:HBox width="100%" height="100%">

	<mx:VBox height="100%" width="400" verticalGap="0">
		<mx:Button label="浏览.."  click="browseHandler(event)"/>
		<mx:Label text="图片名称:"/><mx:Label id="txtFilename"/>
		<mx:Button label="上传文件" id="btnUpload" enabled="false" click="up_clickHandler(event)"/>
		<mx:TextArea  id="txt_id" width="100%" height="60" />
		<mx:Label text="服务器上HDFS文件:"/>
		<mx:DataGrid width="100%" height="100%" dataProvider="{filearr}" id="hdfsfile_id" itemDoubleClick="hdfsfile_id_itemDoubleClickHandler(event)">
			<mx:columns>
				<mx:DataGridColumn headerText="文件名称" dataField="name"/>
				<mx:DataGridColumn width="40" headerText="操作">
					<mx:itemRenderer>
						<fx:Component>
							<mx:Button click="outerDocument.import2DB(event,data)" label="入库">
							</mx:Button>
						</fx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
			</mx:columns>
		</mx:DataGrid>
	</mx:VBox>
	
	<mx:VBox width="100%" height="100%" verticalGap="0">
		<mx:HBox width="100%">
			<mx:Spacer width="100%"/>
			<s:ToggleButton label="隐藏条件查询" click="currentState='qry'" click.qry="currentState=''" label.qry="显示条件查询" />
		</mx:HBox>
		<mx:HBox width="100%" includeIn="default">
			<s:Label text="名称:"/>
			<s:TextInput id="name_id"/>
			<s:Button label="查找" click="refresh(event)"/><s:Button label="清空条件" click="{name_id.text=''}"/>
		</mx:HBox>
	<mx:DataGrid width="100%" height="100%" dataProvider="{results}" id="datagrid_id">
		<mx:columns>
			<mx:DataGridColumn headerText="名称" dataField="name"/>
			<mx:DataGridColumn headerText="邮箱" dataField="email"/>
			<mx:DataGridColumn headerText="QQ" dataField="qq"/>
		</mx:columns>
	</mx:DataGrid>
		<mx:HBox width="100%">
			<mx:Spacer width="100%"/>
			<common:PageToolBar id="pageBar">
			</common:PageToolBar><mx:Spacer width="5"/>
		</mx:HBox>
	</mx:VBox>
	</mx:HBox>
</mx:Module>
